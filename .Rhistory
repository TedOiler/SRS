(MCMC_kde_multi_normal_gamma$y-dnorm(MCMC_kde_multi_normal_gamma$x))^2)
ISE_multi_normal_gamma        = integrate(MCMC_multi_normal_gamma_error,
lower=min(MCMC_multi_normal_gamma),
upper=max(MCMC_multi_normal_gamma))
results[i,1] = ISE_uni_normal$value
results[i,2] = ISE_uni_gamma$value
results[i,3] = ISE_multi_normal_gamma$value
}
set.seed(1903)
n               = seq(200,1e4, by=100)
R               = 1000
hyp_mixing      = 0.5
hyp_norm_mean   = 0
hyp_norm_sd     = 1
hyp_gamma_shape = 5
hyp_gamma_rate  = 1
results = matrix(NA, length(n), 3)
for(i in 1:length(n)){
y_uni_normal         = matrix(NA, R, n[i])
y_uni_gamma          = matrix(NA, R, n[i])
y_multi_normal_gamma_0 = matrix(NA, R, n[i]/2)
y_multi_normal_gamma_1 = matrix(NA, R, n[i]/2)
y_multi_normal_gamma = matrix(NA, R, n[i])
# MCMC
for(r in 1:R){
y_uni_normal[r, ] = rnorm (n[i],mean=hyp_norm_mean,sd=hyp_norm_sd)
y_uni_gamma[r, ]  = rgamma(n[i],shape=hyp_gamma_shape,rate=hyp_gamma_rate)
y_multi_normal_gamma_0[r, ] = rnorm (n[i]/2,mean=hyp_norm_mean,sd=hyp_norm_sd)
y_multi_normal_gamma_1[r, ] = rgamma(n[i]/2,shape=hyp_gamma_shape,rate=hyp_gamma_rate)
}
y_multi_normal_gamma    = cbind(y_multi_normal_gamma_0,y_multi_normal_gamma_1)
MCMC_uni_normal         = colMeans(y_uni_normal)
MCMC_uni_gamma          = colMeans(y_uni_gamma)
MCMC_multi_normal_gamma = colMeans(y_multi_normal_gamma)
# h_normal       = bw.ucv(MCMC_uni_normal)
# h_gamma        = bw.ucv(MCMC_uni_gamma)
# h_normal_gamma = bw.ucv(MCMC_multi_normal_gamma)
MCMC_kde_uni_normal         = density(MCMC_uni_normal,
n=n[i],
bw='nrd0')
MCMC_kde_uni_gamma          = density(MCMC_uni_gamma,
n=n[i],
bw='nrd0')
MCMC_kde_multi_normal_gamma = density(MCMC_multi_normal_gamma,
n=n[i],
bw='nrd0')
# https://stats.stackexchange.com/questions/390777/how-to-compute-integrated-squared-error-for-kernel-density-estimation-in-r
MCMC_uni_normal_error         = splinefun(MCMC_kde_uni_normal$x,
(MCMC_kde_uni_normal$y-dnorm(MCMC_kde_uni_normal$x))^2)
ISE_uni_normal                = integrate(MCMC_uni_normal_error,
lower=min(MCMC_uni_normal),
upper=max(MCMC_uni_normal))
MCMC_uni_gamma_error          = splinefun(MCMC_kde_uni_gamma$x,
(MCMC_kde_uni_gamma$y-dnorm(MCMC_kde_uni_gamma$x))^2)
ISE_uni_gamma                 = integrate(MCMC_uni_gamma_error,
lower=min(MCMC_uni_gamma),
upper=max(MCMC_uni_gamma))
MCMC_multi_normal_gamma_error = splinefun(MCMC_kde_multi_normal_gamma$x,
(MCMC_kde_multi_normal_gamma$y-dnorm(MCMC_kde_multi_normal_gamma$x))^2)
ISE_multi_normal_gamma        = integrate(MCMC_multi_normal_gamma_error,
lower=min(MCMC_multi_normal_gamma),
upper=max(MCMC_multi_normal_gamma))
results[i,1] = ISE_uni_normal$value
results[i,2] = ISE_uni_gamma$value
results[i,3] = ISE_multi_normal_gamma$value
}
results
dim(results)
plot(n, results[,1])
plot(n, results[,1])
lines(n=200)
plot(n, results[,1])
abline(n=200)
plot(n, results[,1])
abline(v=200)
plot(n, results[,1])
abline(v=200, col='red')
abline(v=500, col='red')
abline(v=1000, col='red')
set.seed(1903)
n               = seq(100,2e3, by=50)
R               = 1000
hyp_mixing      = 0.5
hyp_norm_mean   = 0
hyp_norm_sd     = 1
hyp_gamma_shape = 5
hyp_gamma_rate  = 1
results = matrix(NA, length(n), 3)
for(i in 1:length(n)){
y_uni_normal         = matrix(NA, R, n[i])
y_uni_gamma          = matrix(NA, R, n[i])
y_multi_normal_gamma_0 = matrix(NA, R, n[i]/2)
y_multi_normal_gamma_1 = matrix(NA, R, n[i]/2)
y_multi_normal_gamma = matrix(NA, R, n[i])
# MCMC
for(r in 1:R){
y_uni_normal[r, ] = rnorm (n[i],mean=hyp_norm_mean,sd=hyp_norm_sd)
y_uni_gamma[r, ]  = rgamma(n[i],shape=hyp_gamma_shape,rate=hyp_gamma_rate)
y_multi_normal_gamma_0[r, ] = rnorm (n[i]/2,mean=hyp_norm_mean,sd=hyp_norm_sd)
y_multi_normal_gamma_1[r, ] = rgamma(n[i]/2,shape=hyp_gamma_shape,rate=hyp_gamma_rate)
}
y_multi_normal_gamma    = cbind(y_multi_normal_gamma_0,y_multi_normal_gamma_1)
MCMC_uni_normal         = colMeans(y_uni_normal)
MCMC_uni_gamma          = colMeans(y_uni_gamma)
MCMC_multi_normal_gamma = colMeans(y_multi_normal_gamma)
# h_normal       = bw.ucv(MCMC_uni_normal)
# h_gamma        = bw.ucv(MCMC_uni_gamma)
# h_normal_gamma = bw.ucv(MCMC_multi_normal_gamma)
MCMC_kde_uni_normal         = density(MCMC_uni_normal,
n=n[i],
bw='nrd0')
MCMC_kde_uni_gamma          = density(MCMC_uni_gamma,
n=n[i],
bw='nrd0')
MCMC_kde_multi_normal_gamma = density(MCMC_multi_normal_gamma,
n=n[i],
bw='nrd0')
# https://stats.stackexchange.com/questions/390777/how-to-compute-integrated-squared-error-for-kernel-density-estimation-in-r
MCMC_uni_normal_error         = splinefun(MCMC_kde_uni_normal$x,
(MCMC_kde_uni_normal$y-dnorm(MCMC_kde_uni_normal$x))^2)
ISE_uni_normal                = integrate(MCMC_uni_normal_error,
lower=min(MCMC_uni_normal),
upper=max(MCMC_uni_normal))
MCMC_uni_gamma_error          = splinefun(MCMC_kde_uni_gamma$x,
(MCMC_kde_uni_gamma$y-dnorm(MCMC_kde_uni_gamma$x))^2)
ISE_uni_gamma                 = integrate(MCMC_uni_gamma_error,
lower=min(MCMC_uni_gamma),
upper=max(MCMC_uni_gamma))
MCMC_multi_normal_gamma_error = splinefun(MCMC_kde_multi_normal_gamma$x,
(MCMC_kde_multi_normal_gamma$y-dnorm(MCMC_kde_multi_normal_gamma$x))^2)
ISE_multi_normal_gamma        = integrate(MCMC_multi_normal_gamma_error,
lower=min(MCMC_multi_normal_gamma),
upper=max(MCMC_multi_normal_gamma))
results[i,1] = ISE_uni_normal$value
results[i,2] = ISE_uni_gamma$value
results[i,3] = ISE_multi_normal_gamma$value
}
results
dim(results)
plot(n, results[,1])
abline(v=200, col='red')
abline(v=500, col='red')
abline(v=1000, col='red')
par(mfrow=c(1,3))
plot(n, results[,1])
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1))
plot(n, results[,1])
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.1,0.1,0.1,0.1))
plot(n, results[,1])
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.1,0.1,0.1,0.1))
plot(n, results[,1])
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(1,3), mai=c(0.1,0.1,0.1,0.1))
plot(n, results[,1])
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.3,0.3,0.3,0.3))
plot(n, results[,1])
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.3,0.3,0.3,0.3))
plot(n, results[,1], ylim=c(7.2, 9.0))
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.3,0.3,0.3,0.3))
plot(n, results[,1], ylim=c(7.2, 8.9))
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2])
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3])
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.3,0.3,0.3,0.3))
plot(n, results[,1], ylim=c(7.2, 8.9))
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2))
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18))
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.5,0.5,0.5,0.5))
plot(n, results[,1], ylim=c(7.2, 8.9))
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2))
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18))
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9))
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2))
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18))
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
line(n, results[,1], ylim=c(7.2, 8.9))
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='l')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='l')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='l')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
?plot()
?plot()
?plot()
require(kdensity)
require(stats)
knitr::opts_chunk$set(echo = FALSE)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='b')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='b')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='b')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
?plot
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='b')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='b')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='b')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
scaler=0.6
jpeg("./images/MISE error", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='b')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='b')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='b')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
scaler=0.6
jpeg("./images/MISE error.jpg", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='b')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='b')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='b')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
scaler=1
jpeg("./images/MISE error.jpg", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='b')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='b')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='b')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
scaler=0.3
jpeg("./images/MISE error.jpg", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n, results[,1], ylim=c(7.2, 8.9), type='b')
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n, results[,2], ylim=c(3.4, 4.2), type='b')
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n, results[,3], ylim=c(0, 0.18), type='b')
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
scaler=0.3
font=2.2
jpeg("./images/MISE error.jpg", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n,
results[,1],
ylim=c(7.2, 8.9),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n,
results[,2],
ylim=c(3.4, 4.2),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n,
results[,3],
ylim=c(0, 0.18),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
scaler=0.3
font=1.5
jpeg("./images/MISE error.jpg", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n,
results[,1],
ylim=c(7.2, 8.9),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n,
results[,2],
ylim=c(3.4, 4.2),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n,
results[,3],
ylim=c(0, 0.18),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
scaler=0.3
font=1.2
jpeg("./images/MISE error.jpg", width=4096*scaler, height=2160*scaler)
par(mfrow=c(3,1), mai=c(0.4,0.4,0.4,0.4))
plot(n,
results[,1],
ylim=c(7.2, 8.9),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='red4')
abline(v=500, col='red4')
abline(v=1000, col='red4')
plot(n,
results[,2],
ylim=c(3.4, 4.2),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='green4')
abline(v=500, col='green4')
abline(v=1000, col='green4')
plot(n,
results[,3],
ylim=c(0, 0.18),
type='b',
cex.lab=font,
cex.axis=font,
cex.main=font,
cex.sub=font)
abline(v=200, col='blue4')
abline(v=500, col='blue4')
abline(v=1000, col='blue4')
dev.off()
